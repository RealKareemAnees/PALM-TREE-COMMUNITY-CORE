{
  "version": 3,
  "sources": ["../../controllers/streamFile.ts"],
  "sourcesContent": ["import * as tcp from \"net\";\nimport * as fs from \"fs\";\nimport { join } from \"path\";\nimport { errorHandler } from \"../errors/errorHandler\";\n\nconst log = console.log;\n\n/**\n * Streams a file over a TCP socket.\n * @param {tcp.Socket} socket The TCP socket to stream the file to.\n * @param {string} path The path to the file to stream.\n */\nasync function streamFile(socket: tcp.Socket, path: string) {\n  try {\n    const fileStream = fs.createReadStream(join(path));\n\n    fileStream.on(\"data\", (chunk) => {\n      if (!socket.write(chunk)) {\n        fileStream.pause();\n      }\n    });\n\n    socket.on(\"drain\", () => {\n      fileStream.resume();\n    });\n\n    fileStream.on(\"end\", () => {\n      log(\"filestream has ent ,ending socket\");\n      socket.end();\n      log(\"socket ent\");\n    });\n\n    fileStream.on(\"error\", (error) => {\n      log(\"error from filestream ,ending socket\");\n\n      socket.end();\n\n      log(\"socket ent\");\n\n      errorHandler(socket, error);\n    });\n\n    socket.on(\"error\", (error) => {\n      log(\"error from socket, closing filestream\");\n      fileStream.close();\n      log(\"filestream has been closed\");\n      errorHandler(socket, error);\n    });\n  } catch (error) {\n    errorHandler(socket, error);\n  }\n}\n\nexport { streamFile };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,SAAoB;AACpB,kBAAqB;AACrB,0BAA6B;AAE7B,MAAM,MAAM,QAAQ;AAOpB,eAAe,WAAW,QAAoB,MAAc;AAC1D,MAAI;AACF,UAAM,aAAa,GAAG,qBAAiB,kBAAK,IAAI,CAAC;AAEjD,eAAW,GAAG,QAAQ,CAAC,UAAU;AAC/B,UAAI,CAAC,OAAO,MAAM,KAAK,GAAG;AACxB,mBAAW,MAAM;AAAA,MACnB;AAAA,IACF,CAAC;AAED,WAAO,GAAG,SAAS,MAAM;AACvB,iBAAW,OAAO;AAAA,IACpB,CAAC;AAED,eAAW,GAAG,OAAO,MAAM;AACzB,UAAI,mCAAmC;AACvC,aAAO,IAAI;AACX,UAAI,YAAY;AAAA,IAClB,CAAC;AAED,eAAW,GAAG,SAAS,CAAC,UAAU;AAChC,UAAI,sCAAsC;AAE1C,aAAO,IAAI;AAEX,UAAI,YAAY;AAEhB,4CAAa,QAAQ,KAAK;AAAA,IAC5B,CAAC;AAED,WAAO,GAAG,SAAS,CAAC,UAAU;AAC5B,UAAI,uCAAuC;AAC3C,iBAAW,MAAM;AACjB,UAAI,4BAA4B;AAChC,4CAAa,QAAQ,KAAK;AAAA,IAC5B,CAAC;AAAA,EACH,SAAS,OAAO;AACd,0CAAa,QAAQ,KAAK;AAAA,EAC5B;AACF;",
  "names": []
}
