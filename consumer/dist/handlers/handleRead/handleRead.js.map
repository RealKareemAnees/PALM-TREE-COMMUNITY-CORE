{
  "version": 3,
  "sources": ["../../../handlers/handleRead/handleRead.ts"],
  "sourcesContent": ["import e, { NextFunction, Request, Response } from \"express\";\nimport * as tcp from \"net\";\nimport { connectToReader } from \"./functions/connectToReader\";\nimport { getFileInfo } from \"./functions/getFileInfo\";\nimport { getFileStream } from \"./functions/getFileStream\";\n\nasync function handleRead(\n  req: Request,\n  res: Response,\n  next: NextFunction\n): Promise<void> {\n  try {\n    const filepath = req.query.filepath;\n    //@ts-ignore\n    const { filename, size, normalizedFilePath } = await getFileInfo(filepath);\n\n    const socket = new tcp.Socket();\n    await connectToReader(socket, normalizedFilePath);\n\n    res.setHeader(\"Content-Disposition\", `attachment; filename=\"${filename}\"`);\n    res.setHeader(\"Content-Length\", size.toString());\n\n    await getFileStream(socket, res, next);\n  } catch (error) {\n    next(error);\n  }\n}\n\nexport { handleRead };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,UAAqB;AACrB,6BAAgC;AAChC,yBAA4B;AAC5B,2BAA8B;AAE9B,eAAe,WACb,KACA,KACA,MACe;AACf,MAAI;AACF,UAAM,WAAW,IAAI,MAAM;AAE3B,UAAM,EAAE,UAAU,MAAM,mBAAmB,IAAI,UAAM,gCAAY,QAAQ;AAEzE,UAAM,SAAS,IAAI,IAAI,OAAO;AAC9B,cAAM,wCAAgB,QAAQ,kBAAkB;AAEhD,QAAI,UAAU,uBAAuB,yBAAyB,QAAQ,GAAG;AACzE,QAAI,UAAU,kBAAkB,KAAK,SAAS,CAAC;AAE/C,cAAM,oCAAc,QAAQ,KAAK,IAAI;AAAA,EACvC,SAAS,OAAO;AACd,SAAK,KAAK;AAAA,EACZ;AACF;",
  "names": []
}
